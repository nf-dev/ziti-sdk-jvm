
plugins {
    id 'java'
    id 'maven-publish'
    alias(libs.plugins.spotless)
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// Some text from the schema is copy pasted into the source files as UTF-8
// but the default still seems to be to use platform encoding
tasks.withType(JavaCompile) {
    configure(options) {
        options.encoding = 'UTF-8'
    }
}

javadoc {
    options.encoding = 'UTF-8'
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        EdgeApi(MavenPublication) {
            artifactId = 'edge-api'
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

ext {
    description "OpenZiti Edge API client"
    jackson_version = libs.versions.jackson.get()
    jakarta_annotation_version = libs.versions.jakarta.annotation.get()
}

dependencies {
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation(libs.jackson.core)
    implementation(libs.jackson.annotations)
    implementation(libs.jackson.bind)
    implementation(libs.jackson.datatype)
    implementation "org.openapitools:jackson-databind-nullable:0.2.6"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false
    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        leadingTabsToSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // apply a specific flavor of google-java-format
        googleJavaFormat('1.22.0').aosp().reflowLongStrings()
        removeUnusedImports()
        importOrder()
    }
}


tasks.named('spotlessApply').get().mustRunAfter(':openApiGenerate')
tasks.named('spotlessJava').get().mustRunAfter(':openApiGenerate')
tasks.named('spotlessMisc').get().mustRunAfter(':openApiGenerate')

apply from: rootProject.file('publish.gradle')


