/*
 * Copyright (c) 2018-2021 NetFoundry Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.kotlin) apply(false)
    alias(libs.plugins.nexus.publish)
    alias(libs.plugins.semver.git)
    alias(libs.plugins.openapi) apply(false)
}

semver {
    initialVersion = "0.1.0"
    tagType = io.wusa.TagType.LIGHTWEIGHT
    branches {
        branch {
            regex = "main"
            incrementer = "PATCH_INCREMENTER"
            formatter = { info -> "${info.version.major}.${info.version.minor}.${info.version.patch}" }
        }
        branch {
            regex = ".+"
            incrementer = "PATCH_INCREMENTER"
            formatter = { info ->
                def v = info.version
                """${v.major}.${v.minor}.${v.patch}-${info.branch.id}-${v.suffix?.count ?: "0"}.${v.suffix?.sha}"""
            }
        }
    }
}

ext {
    gitCommit = semver.info.shortCommit
    gitBranch = semver.info.branch.name
}

println(rootProject.name)
group = "org.openziti"
version = "${semver.info}"

subprojects {
    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenCentral()
    }

    tasks.withType(PublishToMavenRepository).configureEach {
        onlyIf { !semver.info.dirty }
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_17
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes(
                    'Built-By'       : System.properties['user.name'],
                    'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    'Build-Revision' : semver.info.commit,
                    'Implementation-Version': "${project.version}",
                    'Created-By'     : "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                    'Specification-Vendor': "OpenZiti",
                    'Implementation-Vendor': "OpenZiti",
            )
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

gradle.rootProject {
    apply plugin: libs.plugins.openapi.get().pluginId
}
// generate Ziti Edge API client
// only needed if new version was published in github.com/openziti/edge-api
// run `./gradlew :openApiGenerate`, check build, commit, push
def edgeApiVersion = libs.versions.ziti.api.get()
openApiGenerate {
    applyDefaults()

    remoteInputSpec.set("https://raw.githubusercontent.com/openziti/edge-api/v${edgeApiVersion}/client.yml")
    outputDir.set("$projectDir/edge-api".toString())
    generatorName.set('java')
    groupId.set("org.openziti".toString())
    id.set("edge-api".toString())
    modelPackage.set("org.openziti.edge.model")
    apiPackage.set("org.openziti.edge.api")
    generateModelTests.set(false)
    generateApiTests.set(false)
    configOptions = [
            dateLibrary: "java8",
            library: "native",
            asyncNative: true.toString(),
    ]
}

tasks.named('openApiGenerate').get().finalizedBy(':edge-api:spotlessApply')
